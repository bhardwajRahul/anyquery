---
import QueryCard from "../../components/queryCard.astro";
import { fetchRegistryPlugins } from "../../functions/fetchRegistryPlugins";
import type { plugin } from "../../functions/fetchRegistryPlugins";
import Main from "../../layouts/main.astro";

// Request the list of queries from the API
const { remoteQueries, plugins } = await fetchRegistryPlugins();

const pluginsMapper: Record<string, plugin> = {};
for (const plugin of plugins.plugins) {
    pluginsMapper[plugin.name] = plugin;
}

const pluginsWithQueries = new Set<string>();
for (const query of remoteQueries.queries) {
    if (query.required_plugins) {
        for (const plugin of query.required_plugins) {
            pluginsWithQueries.add(plugin);
        }
    }
}

const allQueries = remoteQueries;
---

<Main
    title="Query hub - Anyquery"
    ogTitle="Anyquery - Pre-made SQL queries for any data source"
    description={`The query hub is a place where you can find pre-made SQL queries for Anyquery. 
Anyquery allows you to run SQL queries on pretty-much any data source`}
>
    <h1 class="text-3xl">Query hub</h1>
    <p class="text-sm text-white/70 mt-1">
        The query hub is a place where you can find pre-made SQL queries for
        Anyquery. <br />
        Answer questions on your data easily using Anyquery and its hub of queries.
    </p>

    <input
        id="search"
        aria-label="Search queries"
        type="text"
        placeholder="🔍 Search queries"
        class="w-full mt-4 p-2 pl-4 bg-black border border-[#262626] rounded-lg text-sm text-white/70"
    />
    <script>
        const searchElement = document.getElementById("search");
        if (searchElement) {
            searchElement.addEventListener("input", (e: Event) => {
                if (!(e.target instanceof HTMLInputElement)) {
                    return;
                }
                const search = e.target.value.toLowerCase();
                const queries = document.getElementById("queries")?.children;
                if (!queries) {
                    return;
                }
                for (let i = 0; i < queries.length; i++) {
                    const query = queries[i];
                    if (!(query instanceof HTMLElement)) {
                        continue;
                    }
                    const titleElement = query.querySelector("h3");
                    const descriptionElement = query.querySelector("p");
                    if (!titleElement || !descriptionElement) {
                        continue;
                    }
                    const title = titleElement.innerText.toLowerCase();
                    const description =
                        descriptionElement.innerText.toLowerCase();
                    if (
                        title.includes(search) ||
                        description.includes(search)
                    ) {
                        query.style.display = "flex";
                    } else {
                        query.style.display = "none";
                    }
                }
            });
        }
    </script>
    <h2 class="text-md mt-4 font-semibold text-white/90 mb-1 tracking-tight">
        Filter by plugin
    </h2>
    <div class="flex flex-wrap gap-2">
        {
            pluginsWithQueries
                .entries()
                .toArray()
                .sort((a, b) => a[0].localeCompare(b[0]))
                .map(([pluginName, _]) => {
                    const plugin = pluginsMapper[pluginName];
                    if (!plugin) {
                        return;
                    }
                    return (
                        <a
                            class="flex items-center text-xs bg-white/10 px-4 py-2 rounded-md"
                            href={`/queries/plugin/${plugin.name}`}
                        >
                            <img
                                class="h-4 w-4 mr-2"
                                src={plugin.icon}
                                alt=""
                            />
                            {plugin.display_name}
                        </a>
                    );
                })
        }
    </div>
    <div id="queries" class="grid md:grid-cols-2 grid-cols-1 gap-2 mt-4">
        {
            allQueries.queries
                .sort((a, b) => a.title.localeCompare(b.title))
                .map((query) => (
                    <QueryCard query={query} pluginsMapper={pluginsMapper} />
                ))
        }
    </div>
</Main>
