{
    "id": "unique-id-for-anyquery",
    "userId": "julien040",
    "tool": {
        "id": "anyquery",
        "name": "Anyquery",
        "meta": {
            "description": "Query, and insert/update/delete data from local/SaaS apps (e.g. Airtable, Google Sheets, GitHub, Spotify, etc.) using SQL.",
            "manifest": {
                "title": "Anyquery",
                "description": "Query, and insert/update/delete data from local/SaaS apps using SQL.",
                "repository": "https://github.com/julien040/anyquery.git",
                "author": "julien040",
                "author_url": "https://github.com/julien040",
                "funding_url": "",
                "requirements": "",
                "version": "0.0.1",
                "changelog": ""
            }
        },
        "content": "\"\"\"\ntitle: Anyquery\nauthor: julien040\nauthor_url: https://github.com/julien040\ngit_url: https://github.com/julien040/anyquery.git\ndescription: Query, and insert/update/delete data from local/SaaS apps (e.g. Airtable, Google Sheets, GitHub, Spotify, etc.) using SQL.\n\"\"\"\n\nfrom pydantic import BaseModel, Field\nfrom requests import post, get\n\n\nendpoint = \"https://gpt-actions.anyquery.xyz/\"\n\n\nclass Tools:\n    def __init__(self):\n        self.valves = self.Valves()\n\n    class UserValves(BaseModel):\n        anyquery_id: str = Field(\n            \"\", description=\"Your Anyquery ID generated by the anyquery gpt command\")\n\n    def list_tables(self) -> str:\n        \"\"\"List all the SQL tables you have access to.\n        When a user requests some data, or you need additional context, call list_tables to check if you can find this information in one of the tables.\n\n        Returns:\n            str: List of all the tables you have access to, with their descriptions.\n        \"\"\"\n\n        url = endpoint + \"list-tables\"\n        response = get(\n            url, headers={\"Authorization\": \"Bearer \" + self.valves.anyquery_id})\n\n        return response.text()\n\n    def describe_table(self, table: str) -> str:\n        \"\"\"Get the schema of a table.\n        Before running a query, call list_tables to check if the table exists, and then call describe_table for each table to understand the schema.\n\n        Args:\n            table (str): The table name.\n\n        Returns:\n            str: A text description of the table schema, with its parameters and types.\n        \"\"\"\n\n        url = endpoint + \"describe-table\"\n        response = post(url, headers={\n                        \"Authorization\": \"Bearer \" + self.valves.anyquery_id}, json={\"table_name\": table})\n\n        return response.text()\n\n    def run_query(self, query: str) -> str:\n        \"\"\"Run a SQL query.\n        Run a SQL query on a table. You can use SELECT, INSERT, UPDATE, DELETE, etc.\n        Before calling this function, call list_tables to know which tables you have access to, and make a call to describe_table to each table in the query.\n        This will help you to understand the schema and the data you are working with.\n\n        Anyquery uses the concept of table parameters like in SQLite. When you describeTable, you might come across fields that are specified as parameter, or required parameters.\n        Required parameters must be passed in the table argument for SELECT queries (`SELECT * FROM table(arg1, ..., argn)`, in the WHERE condition for UPDATE/DELETE, and in `VALUES` for INSERTs.\n        For example, for the table github_repositories_from_user, you'll run `SELECT * FROM github_repositories_from_user('torvalds');` because the column user is set as a required parameter.\n\n        The omission of a required parameter will result in the `no query solution` error. If this error appears, double-check the parameters of the queried tables.\n\n        When you run describeTable, you might come across examples where the table name differs from the one you passed in the parameters of describeTable. You must still use the table name in the parameters.\n\n        You may uses JOIN, WHERE conditions, LIMIT clauses to reduce the amount of data sent.\n\n        When a user requests data and the filtered column is not a parameter, use `lower` on both sides of the `=` to make a non-case-sensitive comparison. (e.g. `SELECT * FROM myTable WHERE lower(lang) = lower('userValue');`)\n        Use the `CONCAT` function to concat strings. Do not use `||`.\n\n        Some columns might be returned as a JSON object or a JSON array. To extract a field of a JSON object, use the `->>` operator, and pass the JSON path (e.g. `SELECT col1 ->> ' $.myField.mySubField'`).\n        For a JSON array, you may also use the `->>` operator. You can also create a new table with one row per element of the JSON array using the `json_each` table (e.g.  `SELECT j.value, a.* FROM myTable a, json_each(a.jsonArrayField)`); Finally, you can filter by the value of a JSON array using the `json_has` function (e.g. SELECT * FROM myTable WHERE json_has(jsonArrayField, 5) -- Returns rows where the JSON array jsonArrayField contains 5;`).\n\n        To reduce the amount of data transferred, please specify the column name in the SELECT statements. Avoid using the `*` wildcard for the columns as much as possible.\n\n        You have access to all the functions of the SQLite standard library such as the math functions, date functions, json functions, etc.\n\n        To handle datetime, use the `datetime(time-value, modifier, modifier, ...)` of SQLite. If no `time-value` is specified, it defaults to the current time. It supports several modifiers ± (e.g. `+ 7 years`,`- 2 months`,`+ 4 days`,`- 3 hours`,`+ 7 minutes`, `+ 32 seconds`.\n\n        Column names and table names with backticks. For example, SELECT `Équipe` FROM `my_table`;\n\n        Args:\n            query (str): The SQL query.\n\n        Returns:\n            str: A markdown table with the query results.\n        \"\"\"\n\n        url = endpoint + \"execute-query\"\n        response = post(url, headers={\n                        \"Authorization\": \"Bearer \" + self.valves.anyquery_id}, json={\"query\": query})\n\n        return response.text()\n}"
    },
    "downloads": 0,
    "upvotes": 0,
    "downvotes": 0,
    "updatedAt": 1739381068,
    "createdAt": 1739381068,
    "user": {
        "id": "julien040",
        "username": "julien040",
        "name": "",
        "profileImageUrl": "",
        "createdAt": 1739380894
    }
}
